{"version":3,"sources":["firebase.js","actions/index.js","actions/types.js","components/ColorPanel/ColorPanel.js","components/SidePanel/UserPanel.js","components/SidePanel/Channels.js","components/SidePanel/DirectMessages.js","components/SidePanel/Starred.js","components/SidePanel/SidePanel.js","components/Messages/MessagesHeader.js","components/Messages/FileModal.js","components/Messages/ProgressBar.js","components/Messages/MessageForm.js","components/Messages/Message.js","components/Messages/Typing.js","components/Messages/Skeleton.js","components/Messages/Messages.js","components/MetaPanel/MetaPanel.js","components/App.js","components/Auth/Login.js","components/Auth/Register.js","Spinner.js","registerServiceWorker.js","reducers/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","setCurrentChannel","channel","type","payload","currentChannel","setPrivateChannel","isPrivateChannel","ColorPanel","state","modal","primary","secondary","user","props","currentUser","usersRef","database","ref","userColors","removeListener","child","uid","off","addListener","userId","on","snap","unshift","val","setState","handleChangePrimary","color","hex","handleChangeSecondary","handleSaveColors","saveColors","push","update","then","console","log","closeModal","catch","err","error","displayUserColors","colors","length","map","i","Fragment","key","Divider","className","onClick","setColors","style","background","openModal","this","Sidebar","as","Menu","icon","inverted","vertical","visible","width","Button","size","Modal","basic","open","onClose","Header","Content","Segment","Label","content","onChange","Actions","Icon","name","React","Component","connect","primaryColor","secondaryColor","UserPanel","previewImage","croppedImage","blob","uploadedCroppedImage","storageRef","storage","userRef","auth","metadata","contentType","dropdownOptions","text","displayName","disabled","handleSignout","uploadCroppedImage","put","getDownloadURL","downloadURL","changeAvatar","updateProfile","photoURL","avatar","handleChange","event","file","target","files","reader","FileReader","readAsDataURL","addEventListener","result","handleCropImage","avatarEditor","getImageScaledToCanvas","toBlob","imageUrl","URL","createObjectURL","signOut","Grid","Column","Row","padding","margin","floated","Dropdown","trigger","Image","src","spaced","options","Input","fluid","label","centered","stackable","columns","node","image","height","border","scale","Channels","activeChannel","channels","channelName","channelDetails","channelsRef","messagesRef","typingRef","notifications","firstLoad","addListeners","loadedChannels","setFirstChannel","addNotificationListener","channelId","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnownTotal","removeListeners","forEach","firstChannel","setActiveChannel","addChannel","newChannel","details","createdBy","handleSubmit","preventDefault","isFormValid","value","changeChannel","remove","clearNotifications","updatedNotifications","getNotificationCount","displayChannels","Item","opacity","active","Form","onSubmit","Field","DirectMessages","users","connectedRef","presenceRef","currentUserUid","loadedUsers","set","onDisconnect","addStatusToUser","connected","updatedUsers","reduce","acc","concat","isUserOnline","status","channelData","getChannelId","currentUserId","fontStyle","SidePanel","fixed","fontSize","Starred","MessagesHeader","numUniqueUsers","handleSearchChange","searchLoading","handleStar","isChannelStarred","clearing","marginBottom","Subheader","loading","placeholder","FileModal","authorized","addFile","sendFile","uploadFile","isAuthorized","mime","lookup","clearFile","filename","includes","ProgressBar","uploadState","percentUploaded","Progress","percent","progress","indicating","MessageForm","uploadTask","message","errors","emojiPicker","handleKeyDown","ctrlKey","keyCode","sendMessage","handleTogglePicker","handleAddEmoji","emoji","oldMessage","newMessage","colonToUnicode","colons","setTimeout","messageInputRef","focus","replace","x","emojiIndex","emojis","unicode","native","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","getMessagesRef","getPath","pathToUpload","filePath","uuidv4","Math","round","bytesTransferred","totalBytes","snapshot","downloadUrl","sendFileMessage","cancel","onSelect","title","onKeyDown","labelPosition","some","Group","widths","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","hasOwnProperty","isImage","Text","Typing","Skeleton","Messages","privateChannel","privateMessagesRef","messages","messagesLoading","searchTerm","searchResults","typingUsers","listeners","listener","addToListeners","newListener","scrollToBottom","messagesEnd","scrollIntoView","behavior","addMessageListener","addTypingListeners","filter","loadedMessages","countUniqueUsers","countUserPosts","addUserStarsListener","once","data","prevStarred","Object","keys","prevState","starChannel","handleSearchMessages","channelMessages","regex","RegExp","match","uniqueUsers","plural","userPosts","setUserPosts","displayMessages","displayChannelName","displayTypingUsers","display","alignItems","displayMessageSkeleton","Array","_","prevProps","MetaPanel","activeIndex","setActiveIndex","titleProps","newIndex","formatCount","num","displayTopPosters","posts","entries","sort","a","b","List","Description","slice","attached","Accordion","styled","Title","circular","marginLeft","Login","email","password","displayErrors","signInWithEmailAndPassword","signedInUser","handleInputError","inputName","toLowerCase","textAlign","verticalAlign","maxWidth","stacked","iconPosition","to","Register","username","passwordConfirmation","isFormEmpty","isPasswordValid","createUserWithEmailAndPassword","createdUser","md5","saveUser","Spinner","Dimmer","Loader","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialUserState","isLoading","initialChannelState","initialColorsState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","clearUser","exact","path","component","App","RootWithAuth","withRouter","ReactDOM","render","document","getElementById","process","origin","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6a2e488e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCqpVjor02hQGv0dkNvO3G33-jmmrZ6Mi8\",\n    authDomain: \"slack-clone-e0e6e.firebaseapp.com\",\n    databaseURL: \"https://slack-clone-e0e6e.firebaseio.com\",\n    projectId: \"slack-clone-e0e6e\",\n    storageBucket: \"slack-clone-e0e6e.appspot.com\",\n    messagingSenderId: \"255862956856\",\n    appId: \"1:255862956856:web:765b8ecc90bf150f3ed7cd\",\n    measurementId: \"G-BV49NPKM1L\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n\n  export default firebase;","import * as actionTypes from \"./types\";\n\n/* User Actions */\nexport const setUser = user => {\n  return {\n    type: actionTypes.SET_USER,\n    payload: {\n      currentUser: user\n    }\n  };\n};\n\nexport const clearUser = () => {\n  return {\n    type: actionTypes.CLEAR_USER\n  };\n};\n\n/* Channel Actions */\nexport const setCurrentChannel = channel => {\n  return {\n    type: actionTypes.SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel\n    }\n  };\n};\n\nexport const setPrivateChannel = isPrivateChannel => {\n  return {\n    type: actionTypes.SET_PRIVATE_CHANNEL,\n    payload: {\n      isPrivateChannel\n    }\n  };\n};\n\nexport const setUserPosts = userPosts => {\n  return {\n    type: actionTypes.SET_USER_POSTS,\n    payload: {\n      userPosts\n    }\n  };\n};\n\n/* Colors Actions */\nexport const setColors = (primaryColor, secondaryColor) => {\n  return {\n    type: actionTypes.SET_COLORS,\n    payload: {\n      primaryColor,\n      secondaryColor\n    }\n  };\n};\n\n","/* User Action Types */\nexport const SET_USER = \"SET_USER\";\nexport const CLEAR_USER = \"CLEAR_USER\";\n\n/* Channel Action Types */\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\";\nexport const SET_PRIVATE_CHANNEL = \"SET_PRIVATE_CHANNEL\";\nexport const SET_USER_POSTS = \"SET_USER_POSTS\";\n\n/* Colors Action Types */\nexport const SET_COLORS = \"SET_COLORS\";\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setColors } from \"../../actions\";\n// prettier-ignore\nimport { Sidebar, Menu, Divider, Button, Modal, Icon, Label, Segment } from \"semantic-ui-react\";\nimport { SliderPicker } from \"react-color\";\n\nclass ColorPanel extends React.Component {\n  state = {\n    modal: false,\n    primary: \"\",\n    secondary: \"\",\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    userColors: []\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListener(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListener();\n  }\n\n  removeListener = () => {\n    this.state.usersRef.child(`${this.state.user.uid}/colors`).off();\n  };\n\n  addListener = userId => {\n    let userColors = [];\n    this.state.usersRef.child(`${userId}/colors`).on(\"child_added\", snap => {\n      userColors.unshift(snap.val());\n      this.setState({ userColors });\n    });\n  };\n\n  handleChangePrimary = color => this.setState({ primary: color.hex });\n\n  handleChangeSecondary = color => this.setState({ secondary: color.hex });\n\n  handleSaveColors = () => {\n    if (this.state.primary && this.state.secondary) {\n      this.saveColors(this.state.primary, this.state.secondary);\n    }\n  };\n\n  saveColors = (primary, secondary) => {\n    this.state.usersRef\n      .child(`${this.state.user.uid}/colors`)\n      .push()\n      .update({\n        primary,\n        secondary\n      })\n      .then(() => {\n        console.log(\"Colors added\");\n        this.closeModal();\n      })\n      .catch(err => console.error(err));\n  };\n\n  displayUserColors = colors =>\n    colors.length > 0 &&\n    colors.map((color, i) => (\n      <React.Fragment key={i}>\n        <Divider />\n        <div\n          className=\"color__container\"\n          onClick={() => this.props.setColors(color.primary, color.secondary)}\n        >\n          <div className=\"color__square\" style={{ background: color.primary }}>\n            <div\n              className=\"color__overlay\"\n              style={{ background: color.secondary }}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    ));\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  render() {\n    const { modal, primary, secondary, userColors } = this.state;\n\n    return (\n      <Sidebar\n        as={Menu}\n        icon=\"labeled\"\n        inverted\n        vertical\n        visible\n        width=\"very thin\"\n      >\n        <Divider />\n        <Button icon=\"add\" size=\"small\" color=\"blue\" onClick={this.openModal} />\n        {this.displayUserColors(userColors)}\n\n        {/* Color Picker Modal */}\n        <Modal basic open={modal} onClose={this.closeModal}>\n          <Modal.Header>Choose App Colors</Modal.Header>\n          <Modal.Content>\n            <Segment inverted>\n              <Label content=\"Primary Color\" />\n              <SliderPicker\n                color={primary}\n                onChange={this.handleChangePrimary}\n              />\n            </Segment>\n\n            <Segment inverted>\n              <Label content=\"Secondary Color\" />\n              <SliderPicker\n                color={secondary}\n                onChange={this.handleChangeSecondary}\n              />\n            </Segment>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSaveColors}>\n              <Icon name=\"checkmark\" /> Save Colors\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </Sidebar>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setColors }\n)(ColorPanel);\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport AvatarEditor from \"react-avatar-editor\";\n// prettier-ignore\nimport { Grid, Header, Icon, Dropdown, Image, Modal, Input, Button } from \"semantic-ui-react\";\n\nclass UserPanel extends React.Component {\n  state = {\n    user: this.props.currentUser,\n    modal: false,\n    previewImage: \"\",\n    croppedImage: \"\",\n    blob: null,\n    uploadedCroppedImage: \"\",\n    storageRef: firebase.storage().ref(),\n    userRef: firebase.auth().currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    metadata: {\n      contentType: \"image/jpeg\"\n    }\n  };\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  dropdownOptions = () => [\n    {\n      key: \"user\",\n      text: (\n        <span>\n          Signed in as <strong>{this.state.user.displayName}</strong>\n        </span>\n      ),\n      disabled: true\n    },\n    {\n      key: \"avatar\",\n      text: <span onClick={this.openModal}>Change Avatar</span>\n    },\n    {\n      key: \"signout\",\n      text: <span onClick={this.handleSignout}>Sign Out</span>\n    }\n  ];\n\n  uploadCroppedImage = () => {\n    const { storageRef, userRef, blob, metadata } = this.state;\n\n    storageRef\n      .child(`avatars/user-${userRef.uid}`)\n      .put(blob, metadata)\n      .then(snap => {\n        snap.ref.getDownloadURL().then(downloadURL => {\n          this.setState({ uploadedCroppedImage: downloadURL }, () =>\n            this.changeAvatar()\n          );\n        });\n      });\n  };\n\n  changeAvatar = () => {\n    this.state.userRef\n      .updateProfile({\n        photoURL: this.state.uploadedCroppedImage\n      })\n      .then(() => {\n        console.log(\"PhotoURL updated\");\n        this.closeModal();\n      })\n      .catch(err => {\n        console.error(err);\n      });\n\n    this.state.usersRef\n      .child(this.state.user.uid)\n      .update({ avatar: this.state.uploadedCroppedImage })\n      .then(() => {\n        console.log(\"User avatar updated\");\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  handleChange = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    if (file) {\n      reader.readAsDataURL(file);\n      reader.addEventListener(\"load\", () => {\n        this.setState({ previewImage: reader.result });\n      });\n    }\n  };\n\n  handleCropImage = () => {\n    if (this.avatarEditor) {\n      this.avatarEditor.getImageScaledToCanvas().toBlob(blob => {\n        let imageUrl = URL.createObjectURL(blob);\n        this.setState({\n          croppedImage: imageUrl,\n          blob\n        });\n      });\n    }\n  };\n\n  handleSignout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"signed out!\"));\n  };\n\n  render() {\n    const { user, modal, previewImage, croppedImage } = this.state;\n    const { primaryColor } = this.props;\n\n    return (\n      <Grid style={{ background: primaryColor }}>\n        <Grid.Column>\n          <Grid.Row style={{ padding: \"1.2em\", margin: 0 }}>\n            {/* App Header */}\n            <Header inverted floated=\"left\" as=\"h2\">\n              <Icon name=\"code\" />\n              <Header.Content>DevChat</Header.Content>\n            </Header>\n\n            {/* User Dropdown  */}\n            <Header style={{ padding: \"0.25em\" }} as=\"h4\" inverted>\n              <Dropdown\n                trigger={\n                  <span>\n                    <Image src={user.photoURL} spaced=\"right\" avatar />\n                    {user.displayName}\n                  </span>\n                }\n                options={this.dropdownOptions()}\n              />\n            </Header>\n          </Grid.Row>\n\n          {/* Change User Avatar Modal   */}\n          <Modal basic open={modal} onClose={this.closeModal}>\n            <Modal.Header>Change Avatar</Modal.Header>\n            <Modal.Content>\n              <Input\n                onChange={this.handleChange}\n                fluid\n                type=\"file\"\n                label=\"New Avatar\"\n                name=\"previewImage\"\n              />\n              <Grid centered stackable columns={2}>\n                <Grid.Row centered>\n                  <Grid.Column className=\"ui center aligned grid\">\n                    {previewImage && (\n                      <AvatarEditor\n                        ref={node => (this.avatarEditor = node)}\n                        image={previewImage}\n                        width={120}\n                        height={120}\n                        border={50}\n                        scale={1.2}\n                      />\n                    )}\n                  </Grid.Column>\n                  <Grid.Column>\n                    {croppedImage && (\n                      <Image\n                        style={{ margin: \"3.5em auto\" }}\n                        width={100}\n                        height={100}\n                        src={croppedImage}\n                      />\n                    )}\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Modal.Content>\n            <Modal.Actions>\n              {croppedImage && (\n                <Button\n                  color=\"green\"\n                  inverted\n                  onClick={this.uploadCroppedImage}\n                >\n                  <Icon name=\"save\" /> Change Avatar\n                </Button>\n              )}\n              <Button color=\"green\" inverted onClick={this.handleCropImage}>\n                <Icon name=\"image\" /> Preview\n              </Button>\n              <Button color=\"red\" inverted onClick={this.closeModal}>\n                <Icon name=\"remove\" /> Cancel\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default UserPanel;\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\n// prettier-ignore\nimport { Menu, Icon, Modal, Form, Input, Button, Label } from \"semantic-ui-react\";\n\nclass Channels extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    channel: null,\n    channels: [],\n    channelName: \"\",\n    channelDetails: \"\",\n    channelsRef: firebase.database().ref(\"channels\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    typingRef: firebase.database().ref(\"typing\"),\n    notifications: [],\n    modal: false,\n    firstLoad: true\n  };\n\n  componentDidMount() {\n    this.addListeners();\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  addListeners = () => {\n    let loadedChannels = [];\n    this.state.channelsRef.on(\"child_added\", snap => {\n      loadedChannels.push(snap.val());\n      this.setState({ channels: loadedChannels }, () => this.setFirstChannel());\n      this.addNotificationListener(snap.key);\n    });\n  };\n\n  addNotificationListener = channelId => {\n    this.state.messagesRef.child(channelId).on(\"value\", snap => {\n      if (this.state.channel) {\n        this.handleNotifications(\n          channelId,\n          this.state.channel.id,\n          this.state.notifications,\n          snap\n        );\n      }\n    });\n  };\n\n  handleNotifications = (channelId, currentChannelId, notifications, snap) => {\n    let lastTotal = 0;\n\n    let index = notifications.findIndex(\n      notification => notification.id === channelId\n    );\n\n    if (index !== -1) {\n      if (channelId !== currentChannelId) {\n        lastTotal = notifications[index].total;\n\n        if (snap.numChildren() - lastTotal > 0) {\n          notifications[index].count = snap.numChildren() - lastTotal;\n        }\n      }\n      notifications[index].lastKnownTotal = snap.numChildren();\n    } else {\n      notifications.push({\n        id: channelId,\n        total: snap.numChildren(),\n        lastKnownTotal: snap.numChildren(),\n        count: 0\n      });\n    }\n\n    this.setState({ notifications });\n  };\n\n  removeListeners = () => {\n    this.state.channelsRef.off();\n    this.state.channels.forEach(channel => {\n      this.state.messagesRef.child(channel.id).off();\n    });\n  };\n\n  setFirstChannel = () => {\n    const firstChannel = this.state.channels[0];\n    if (this.state.firstLoad && this.state.channels.length > 0) {\n      this.props.setCurrentChannel(firstChannel);\n      this.setActiveChannel(firstChannel);\n      this.setState({ channel: firstChannel });\n    }\n    this.setState({ firstLoad: false });\n  };\n\n  addChannel = () => {\n    const { channelsRef, channelName, channelDetails, user } = this.state;\n\n    const key = channelsRef.push().key;\n\n    const newChannel = {\n      id: key,\n      name: channelName,\n      details: channelDetails,\n      createdBy: {\n        name: user.displayName,\n        avatar: user.photoURL\n      }\n    };\n\n    channelsRef\n      .child(key)\n      .update(newChannel)\n      .then(() => {\n        this.setState({ channelName: \"\", channelDetails: \"\" });\n        this.closeModal();\n        console.log(\"channel added\");\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.addChannel();\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  changeChannel = channel => {\n    this.setActiveChannel(channel);\n    this.state.typingRef\n      .child(this.state.channel.id)\n      .child(this.state.user.uid)\n      .remove();\n    this.clearNotifications();\n    this.props.setCurrentChannel(channel);\n    this.props.setPrivateChannel(false);\n    this.setState({ channel });\n  };\n\n  clearNotifications = () => {\n    let index = this.state.notifications.findIndex(\n      notification => notification.id === this.state.channel.id\n    );\n\n    if (index !== -1) {\n      let updatedNotifications = [...this.state.notifications];\n      updatedNotifications[index].total = this.state.notifications[\n        index\n      ].lastKnownTotal;\n      updatedNotifications[index].count = 0;\n      this.setState({ notifications: updatedNotifications });\n    }\n  };\n\n  setActiveChannel = channel => {\n    this.setState({ activeChannel: channel.id });\n  };\n\n  getNotificationCount = channel => {\n    let count = 0;\n\n    this.state.notifications.forEach(notification => {\n      if (notification.id === channel.id) {\n        count = notification.count;\n      }\n    });\n\n    if (count > 0) return count;\n  };\n\n  displayChannels = channels =>\n    channels.length > 0 &&\n    channels.map(channel => (\n      <Menu.Item\n        key={channel.id}\n        onClick={() => this.changeChannel(channel)}\n        name={channel.name}\n        style={{ opacity: 0.7 }}\n        active={channel.id === this.state.activeChannel}\n      >\n        {this.getNotificationCount(channel) && (\n          <Label color=\"red\">{this.getNotificationCount(channel)}</Label>\n        )}\n        # {channel.name}\n      </Menu.Item>\n    ));\n\n  isFormValid = ({ channelName, channelDetails }) =>\n    channelName && channelDetails;\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  render() {\n    const { channels, modal } = this.state;\n\n    return (\n      <React.Fragment>\n        <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"exchange\" /> CHANNELS\n            </span>{\" \"}\n            ({channels.length}) <Icon name=\"add\" onClick={this.openModal} />\n          </Menu.Item>\n          {this.displayChannels(channels)}\n        </Menu.Menu>\n\n        {/* Add Channel Modal */}\n        <Modal basic open={modal} onClose={this.closeModal}>\n          <Modal.Header>Add a Channel</Modal.Header>\n          <Modal.Content>\n            <Form onSubmit={this.handleSubmit}>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Name of Channel\"\n                  name=\"channelName\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"About the Channel\"\n                  name=\"channelDetails\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\n              <Icon name=\"checkmark\" /> Add\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(Channels);\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nclass DirectMessages extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    users: [],\n    usersRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\")\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  removeListeners = () => {\n    this.state.usersRef.off();\n    this.state.presenceRef.off();\n    this.state.connectedRef.off();\n  };\n\n  addListeners = currentUserUid => {\n    let loadedUsers = [];\n    this.state.usersRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({ users: loadedUsers });\n      }\n    });\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        const ref = this.state.presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    this.state.presenceRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    this.state.presenceRef.on(\"child_removed\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  isUserOnline = user => user.status === \"online\";\n\n  changeChannel = user => {\n    const channelId = this.getChannelId(user.uid);\n    const channelData = {\n      id: channelId,\n      name: user.name\n    };\n    this.props.setCurrentChannel(channelData);\n    this.props.setPrivateChannel(true);\n    this.setActiveChannel(user.uid);\n  };\n\n  getChannelId = userId => {\n    const currentUserId = this.state.user.uid;\n    return userId < currentUserId\n      ? `${userId}/${currentUserId}`\n      : `${currentUserId}/${userId}`;\n  };\n\n  setActiveChannel = userId => {\n    this.setState({ activeChannel: userId });\n  };\n\n  render() {\n    const { users, activeChannel } = this.state;\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" /> DIRECT MESSAGES\n          </span>{\" \"}\n          ({users.length})\n        </Menu.Item>\n        {users.map(user => (\n          <Menu.Item\n            key={user.uid}\n            active={user.uid === activeChannel}\n            onClick={() => this.changeChannel(user)}\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\n          >\n            <Icon\n              name=\"circle\"\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\n            />\n            @ {user.name}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(DirectMessages);\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nclass DirectMessages extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    users: [],\n    usersRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\")\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  removeListeners = () => {\n    this.state.usersRef.off();\n    this.state.presenceRef.off();\n    this.state.connectedRef.off();\n  };\n\n  addListeners = currentUserUid => {\n    let loadedUsers = [];\n    this.state.usersRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({ users: loadedUsers });\n      }\n    });\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        const ref = this.state.presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    this.state.presenceRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    this.state.presenceRef.on(\"child_removed\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  isUserOnline = user => user.status === \"online\";\n\n  changeChannel = user => {\n    const channelId = this.getChannelId(user.uid);\n    const channelData = {\n      id: channelId,\n      name: user.name\n    };\n    this.props.setCurrentChannel(channelData);\n    this.props.setPrivateChannel(true);\n    this.setActiveChannel(user.uid);\n  };\n\n  getChannelId = userId => {\n    const currentUserId = this.state.user.uid;\n    return userId < currentUserId\n      ? `${userId}/${currentUserId}`\n      : `${currentUserId}/${userId}`;\n  };\n\n  setActiveChannel = userId => {\n    this.setState({ activeChannel: userId });\n  };\n\n  render() {\n    const { users, activeChannel } = this.state;\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" /> DIRECT MESSAGES\n          </span>{\" \"}\n          ({users.length})\n        </Menu.Item>\n        {users.map(user => (\n          <Menu.Item\n            key={user.uid}\n            active={user.uid === activeChannel}\n            onClick={() => this.changeChannel(user)}\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\n          >\n            <Icon\n              name=\"circle\"\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\n            />\n            @ {user.name}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(DirectMessages);\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nimport UserPanel from \"./UserPanel\";\nimport Channels from \"./Channels\";\nimport DirectMessages from \"./DirectMessages\";\nimport Starred from \"./Starred\";\n\nclass SidePanel extends React.Component {\n  render() {\n    const { currentUser, primaryColor } = this.props;\n\n    return (\n      <Menu\n        size=\"large\"\n        inverted\n        fixed=\"left\"\n        vertical\n        style={{ background: primaryColor, fontSize: \"1.2rem\" }}\n      >\n        <UserPanel primaryColor={primaryColor} currentUser={currentUser} />\n        <Starred currentUser={currentUser} />\n        <Channels currentUser={currentUser} />\n        <DirectMessages currentUser={currentUser} />\n      </Menu>\n    );\n  }\n}\n\nexport default SidePanel;\n\n","import React from \"react\";\nimport { Header, Segment, Input, Icon } from \"semantic-ui-react\";\n\nclass MessagesHeader extends React.Component {\n  render() {\n    const {\n      channelName,\n      numUniqueUsers,\n      handleSearchChange,\n      searchLoading,\n      isPrivateChannel,\n      handleStar,\n      isChannelStarred\n    } = this.props;\n\n    return (\n      <Segment clearing>\n        {/* Channel Title */}\n        <Header fluid=\"true\" as=\"h2\" floated=\"left\" style={{ marginBottom: 0 }}>\n          <span>\n            {channelName}\n            {!isPrivateChannel && (\n              <Icon\n                onClick={handleStar}\n                name={isChannelStarred ? \"star\" : \"star outline\"}\n                color={isChannelStarred ? \"yellow\" : \"black\"}\n              />\n            )}\n          </span>\n          <Header.Subheader>{numUniqueUsers}</Header.Subheader>\n        </Header>\n\n        {/* Channel Search Input */}\n        <Header floated=\"right\">\n          <Input\n            loading={searchLoading}\n            onChange={handleSearchChange}\n            size=\"mini\"\n            icon=\"search\"\n            name=\"searchTerm\"\n            placeholder=\"Search Messages\"\n          />\n        </Header>\n      </Segment>\n    );\n  }\n}\n\nexport default MessagesHeader;\n","import React from \"react\";\nimport mime from \"mime-types\";\nimport { Modal, Input, Button, Icon } from \"semantic-ui-react\";\n\nclass FileModal extends React.Component {\n  state = {\n    file: null,\n    authorized: [\"image/jpeg\", \"image/png\"]\n  };\n\n  addFile = event => {\n    const file = event.target.files[0];\n    if (file) {\n      this.setState({ file });\n    }\n  };\n\n  sendFile = () => {\n    const { file } = this.state;\n    const { uploadFile, closeModal } = this.props;\n\n    if (file !== null) {\n      if (this.isAuthorized(file.name)) {\n        const metadata = { contentType: mime.lookup(file.name) };\n        uploadFile(file, metadata);\n        closeModal();\n        this.clearFile();\n      }\n    }\n  };\n\n  isAuthorized = filename =>\n    this.state.authorized.includes(mime.lookup(filename));\n\n  clearFile = () => this.setState({ file: null });\n\n  render() {\n    const { modal, closeModal } = this.props;\n\n    return (\n      <Modal basic open={modal} onClose={closeModal}>\n        <Modal.Header>Select an Image File</Modal.Header>\n        <Modal.Content>\n          <Input\n            onChange={this.addFile}\n            fluid\n            label=\"File types: jpg, png\"\n            name=\"file\"\n            type=\"file\"\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={this.sendFile} color=\"green\" inverted>\n            <Icon name=\"checkmark\" /> Send\n          </Button>\n          <Button color=\"red\" inverted onClick={closeModal}>\n            <Icon name=\"remove\" /> Cancel\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default FileModal;\n","import React from \"react\";\nimport { Progress } from \"semantic-ui-react\";\n\nconst ProgressBar = ({ uploadState, percentUploaded }) =>\n  uploadState && (\n    <Progress\n      className=\"progress__bar\"\n      percent={percentUploaded}\n      progress\n      indicating\n      size=\"medium\"\n      inverted\n    />\n  );\n\nexport default ProgressBar;\n","import React from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport firebase from \"../../firebase\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport FileModal from \"./FileModal\";\nimport ProgressBar from \"./ProgressBar\";\n\nclass MessageForm extends React.Component {\n  state = {\n    storageRef: firebase.storage().ref(),\n    typingRef: firebase.database().ref(\"typing\"),\n    uploadTask: null,\n    uploadState: \"\",\n    percentUploaded: 0,\n    message: \"\",\n    channel: this.props.currentChannel,\n    user: this.props.currentUser,\n    loading: false,\n    errors: [],\n    modal: false,\n    emojiPicker: false\n  };\n\n  componentWillUnmount() {\n    if (this.state.uploadTask !== null) {\n      this.state.uploadTask.cancel();\n      this.setState({ uploadTask: null });\n    }\n  }\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleKeyDown = event => {\n    if (event.ctrlKey && event.keyCode === 13) {\n      this.sendMessage();\n    }\n\n    const { message, typingRef, channel, user } = this.state;\n\n    if (message) {\n      typingRef\n        .child(channel.id)\n        .child(user.uid)\n        .set(user.displayName);\n    } else {\n      typingRef\n        .child(channel.id)\n        .child(user.uid)\n        .remove();\n    }\n  };\n\n  handleTogglePicker = () => {\n    this.setState({ emojiPicker: !this.state.emojiPicker });\n  };\n\n  handleAddEmoji = emoji => {\n    const oldMessage = this.state.message;\n    const newMessage = this.colonToUnicode(` ${oldMessage} ${emoji.colons} `);\n    this.setState({ message: newMessage, emojiPicker: false });\n    setTimeout(() => this.messageInputRef.focus(), 0);\n  };\n\n  colonToUnicode = message => {\n    return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\n      x = x.replace(/:/g, \"\");\n      let emoji = emojiIndex.emojis[x];\n      if (typeof emoji !== \"undefined\") {\n        let unicode = emoji.native;\n        if (typeof unicode !== \"undefined\") {\n          return unicode;\n        }\n      }\n      x = \":\" + x + \":\";\n      return x;\n    });\n  };\n\n  createMessage = (fileUrl = null) => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        id: this.state.user.uid,\n        name: this.state.user.displayName,\n        avatar: this.state.user.photoURL\n      }\n    };\n    if (fileUrl !== null) {\n      message[\"image\"] = fileUrl;\n    } else {\n      message[\"content\"] = this.state.message;\n    }\n    return message;\n  };\n\n  sendMessage = () => {\n    const { getMessagesRef } = this.props;\n    const { message, channel, user, typingRef } = this.state;\n\n    if (message) {\n      this.setState({ loading: true });\n      getMessagesRef()\n        .child(channel.id)\n        .push()\n        .set(this.createMessage())\n        .then(() => {\n          this.setState({ loading: false, message: \"\", errors: [] });\n          typingRef\n            .child(channel.id)\n            .child(user.uid)\n            .remove();\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(err)\n          });\n        });\n    } else {\n      this.setState({\n        errors: this.state.errors.concat({ message: \"Add a message\" })\n      });\n    }\n  };\n\n  getPath = () => {\n    if (this.props.isPrivateChannel) {\n      return `chat/private-${this.state.channel.id}`;\n    } else {\n      return \"chat/public\";\n    }\n  };\n\n  uploadFile = (file, metadata) => {\n    const pathToUpload = this.state.channel.id;\n    const ref = this.props.getMessagesRef();\n    const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\n\n    this.setState(\n      {\n        uploadState: \"uploading\",\n        uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n      },\n      () => {\n        this.state.uploadTask.on(\n          \"state_changed\",\n          snap => {\n            const percentUploaded = Math.round(\n              (snap.bytesTransferred / snap.totalBytes) * 100\n            );\n            this.setState({ percentUploaded });\n          },\n          err => {\n            console.error(err);\n            this.setState({\n              errors: this.state.errors.concat(err),\n              uploadState: \"error\",\n              uploadTask: null\n            });\n          },\n          () => {\n            this.state.uploadTask.snapshot.ref\n              .getDownloadURL()\n              .then(downloadUrl => {\n                this.sendFileMessage(downloadUrl, ref, pathToUpload);\n              })\n              .catch(err => {\n                console.error(err);\n                this.setState({\n                  errors: this.state.errors.concat(err),\n                  uploadState: \"error\",\n                  uploadTask: null\n                });\n              });\n          }\n        );\n      }\n    );\n  };\n\n  sendFileMessage = (fileUrl, ref, pathToUpload) => {\n    ref\n      .child(pathToUpload)\n      .push()\n      .set(this.createMessage(fileUrl))\n      .then(() => {\n        this.setState({ uploadState: \"done\" });\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          errors: this.state.errors.concat(err)\n        });\n      });\n  };\n\n  render() {\n    // prettier-ignore\n    const { errors, message, loading, modal, uploadState, percentUploaded, emojiPicker } = this.state;\n\n    return (\n      <Segment className=\"message__form\">\n        {emojiPicker && (\n          <Picker\n            set=\"apple\"\n            onSelect={this.handleAddEmoji}\n            className=\"emojipicker\"\n            title=\"Pick your emoji\"\n            emoji=\"point_up\"\n          />\n        )}\n        <Input\n          fluid\n          name=\"message\"\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n          value={message}\n          ref={node => (this.messageInputRef = node)}\n          style={{ marginBottom: \"0.7em\" }}\n          label={\n            <Button\n              icon={emojiPicker ? \"close\" : \"add\"}\n              content={emojiPicker ? \"Close\" : null}\n              onClick={this.handleTogglePicker}\n            />\n          }\n          labelPosition=\"left\"\n          className={\n            errors.some(error => error.message.includes(\"message\"))\n              ? \"error\"\n              : \"\"\n          }\n          placeholder=\"Write your message\"\n        />\n        <Button.Group icon widths=\"2\">\n          <Button\n            onClick={this.sendMessage}\n            disabled={loading}\n            color=\"orange\"\n            content=\"Add Reply\"\n            labelPosition=\"left\"\n            icon=\"edit\"\n          />\n          <Button\n            color=\"teal\"\n            disabled={uploadState === \"uploading\"}\n            onClick={this.openModal}\n            content=\"Upload Media\"\n            labelPosition=\"right\"\n            icon=\"cloud upload\"\n          />\n        </Button.Group>\n        <FileModal\n          modal={modal}\n          closeModal={this.closeModal}\n          uploadFile={this.uploadFile}\n        />\n        <ProgressBar\n          uploadState={uploadState}\n          percentUploaded={percentUploaded}\n        />\n      </Segment>\n    );\n  }\n}\n\nexport default MessageForm;\n ","import React from \"react\";\nimport moment from \"moment\";\nimport { Comment, Image } from \"semantic-ui-react\";\n\nconst isOwnMessage = (message, user) => {\n  return message.user.id === user.uid ? \"message__self\" : \"\";\n};\n\nconst isImage = message => {\n  return message.hasOwnProperty(\"image\") && !message.hasOwnProperty(\"content\");\n};\n\nconst timeFromNow = timestamp => moment(timestamp).fromNow();\n\nconst Message = ({ message, user }) => (\n  <Comment>\n    <Comment.Avatar src={message.user.avatar} />\n    <Comment.Content className={isOwnMessage(message, user)}>\n      <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\n      <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\n      {isImage(message) ? (\n        <Image src={message.image} className=\"message__image\" />\n      ) : (\n        <Comment.Text>{message.content}</Comment.Text>\n      )}\n    </Comment.Content>\n  </Comment>\n);\n\nexport default Message;\n","import React from 'react';\n\nconst Typing = () => (\n  <div className=\"typing\">\n    <div className=\"typing__dot\"></div>\n    <div className=\"typing__dot\"></div>\n    <div className=\"typing__dot\"></div>\n  </div>\n)\n\nexport default Typing;","import React from \"react\";\n\nconst Skeleton = () => (\n  <div className=\"skeleton\">\n    <div className=\"skeleton__avatar\" />\n    <div className=\"skeleton__author\" />\n    <div className=\"skeleton__details\" />\n  </div>\n);\n\nexport default Skeleton;\n","import React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { setUserPosts } from \"../../actions\";\nimport firebase from \"../../firebase\";\n\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport Typing from \"./Typing\";\nimport Skeleton from \"./Skeleton\";\n\nclass Messages extends React.Component {\n  state = {\n    privateChannel: this.props.isPrivateChannel,\n    privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    messages: [],\n    messagesLoading: true,\n    channel: this.props.currentChannel,\n    isChannelStarred: false,\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    numUniqueUsers: \"\",\n    searchTerm: \"\",\n    searchLoading: false,\n    searchResults: [],\n    typingRef: firebase.database().ref(\"typing\"),\n    typingUsers: [],\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    listeners: []\n  };\n\n  componentDidMount() {\n    const { channel, user, listeners } = this.state;\n\n    if (channel && user) {\n      this.removeListeners(listeners);\n      this.addListeners(channel.id);\n      this.addUserStarsListener(channel.id, user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners(this.state.listeners);\n    this.state.connectedRef.off();\n  }\n\n  removeListeners = listeners => {\n    listeners.forEach(listener => {\n      listener.ref.child(listener.id).off(listener.event);\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.messagesEnd) {\n      this.scrollToBottom();\n    }\n  }\n\n  addToListeners = (id, ref, event) => {\n    const index = this.state.listeners.findIndex(listener => {\n      return (\n        listener.id === id && listener.ref === ref && listener.event === event\n      );\n    });\n\n    if (index === -1) {\n      const newListener = { id, ref, event };\n      this.setState({ listeners: this.state.listeners.concat(newListener) });\n    }\n  };\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  addListeners = channelId => {\n    this.addMessageListener(channelId);\n    this.addTypingListeners(channelId);\n  };\n\n  addTypingListeners = channelId => {\n    let typingUsers = [];\n    this.state.typingRef.child(channelId).on(\"child_added\", snap => {\n      if (snap.key !== this.state.user.uid) {\n        typingUsers = typingUsers.concat({\n          id: snap.key,\n          name: snap.val()\n        });\n        this.setState({ typingUsers });\n      }\n    });\n    this.addToListeners(channelId, this.state.typingRef, \"child_added\");\n\n    this.state.typingRef.child(channelId).on(\"child_removed\", snap => {\n      const index = typingUsers.findIndex(user => user.id === snap.key);\n      if (index !== -1) {\n        typingUsers = typingUsers.filter(user => user.id !== snap.key);\n        this.setState({ typingUsers });\n      }\n    });\n    this.addToListeners(channelId, this.state.typingRef, \"child_removed\");\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        this.state.typingRef\n          .child(channelId)\n          .child(this.state.user.uid)\n          .onDisconnect()\n          .remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n      }\n    });\n  };\n\n  addMessageListener = channelId => {\n    let loadedMessages = [];\n    const ref = this.getMessagesRef();\n    ref.child(channelId).on(\"child_added\", snap => {\n      loadedMessages.push(snap.val());\n      this.setState({\n        messages: loadedMessages,\n        messagesLoading: false\n      });\n      this.countUniqueUsers(loadedMessages);\n      this.countUserPosts(loadedMessages);\n    });\n    this.addToListeners(channelId, ref, \"child_added\");\n  };\n\n  addUserStarsListener = (channelId, userId) => {\n    this.state.usersRef\n      .child(userId)\n      .child(\"starred\")\n      .once(\"value\")\n      .then(data => {\n        if (data.val() !== null) {\n          const channelIds = Object.keys(data.val());\n          const prevStarred = channelIds.includes(channelId);\n          this.setState({ isChannelStarred: prevStarred });\n        }\n      });\n  };\n\n  getMessagesRef = () => {\n    const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n    return privateChannel ? privateMessagesRef : messagesRef;\n  };\n\n  handleStar = () => {\n    this.setState(\n      prevState => ({\n        isChannelStarred: !prevState.isChannelStarred\n      }),\n      () => this.starChannel()\n    );\n  };\n\n  starChannel = () => {\n    if (this.state.isChannelStarred) {\n      this.state.usersRef.child(`${this.state.user.uid}/starred`).update({\n        [this.state.channel.id]: {\n          name: this.state.channel.name,\n          details: this.state.channel.details,\n          createdBy: {\n            name: this.state.channel.createdBy.name,\n            avatar: this.state.channel.createdBy.avatar\n          }\n        }\n      });\n    } else {\n      this.state.usersRef\n        .child(`${this.state.user.uid}/starred`)\n        .child(this.state.channel.id)\n        .remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n    }\n  };\n\n  handleSearchChange = event => {\n    this.setState(\n      {\n        searchTerm: event.target.value,\n        searchLoading: true\n      },\n      () => this.handleSearchMessages()\n    );\n  };\n\n  handleSearchMessages = () => {\n    const channelMessages = [...this.state.messages];\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\n    const searchResults = channelMessages.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n    this.setState({ searchResults });\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\n  };\n\n  countUniqueUsers = messages => {\n    const uniqueUsers = messages.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n    this.setState({ numUniqueUsers });\n  };\n\n  countUserPosts = messages => {\n    let userPosts = messages.reduce((acc, message) => {\n      if (message.user.name in acc) {\n        acc[message.user.name].count += 1;\n      } else {\n        acc[message.user.name] = {\n          avatar: message.user.avatar,\n          count: 1\n        };\n      }\n      return acc;\n    }, {});\n    this.props.setUserPosts(userPosts);\n  };\n\n  displayMessages = messages =>\n    messages.length > 0 &&\n    messages.map(message => (\n      <Message\n        key={message.timestamp}\n        message={message}\n        user={this.state.user}\n      />\n    ));\n\n  displayChannelName = channel => {\n    return channel\n      ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}`\n      : \"\";\n  };\n\n  displayTypingUsers = users =>\n    users.length > 0 &&\n    users.map(user => (\n      <div\n        style={{ display: \"flex\", alignItems: \"center\", marginBottom: \"0.2em\" }}\n        key={user.id}\n      >\n        <span className=\"user__typing\">{user.name} is typing</span> <Typing />\n      </div>\n    ));\n\n  displayMessageSkeleton = loading =>\n    loading ? (\n      <React.Fragment>\n        {[...Array(10)].map((_, i) => (\n          <Skeleton key={i} />\n        ))}\n      </React.Fragment>\n    ) : null;\n\n  render() {\n    // prettier-ignore\n    const { messagesRef, messages, channel, user, numUniqueUsers, searchTerm, searchResults, searchLoading, privateChannel, isChannelStarred, typingUsers, messagesLoading } = this.state;\n\n    return (\n      <React.Fragment>\n        <MessagesHeader\n          channelName={this.displayChannelName(channel)}\n          numUniqueUsers={numUniqueUsers}\n          handleSearchChange={this.handleSearchChange}\n          searchLoading={searchLoading}\n          isPrivateChannel={privateChannel}\n          handleStar={this.handleStar}\n          isChannelStarred={isChannelStarred}\n        />\n\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {this.displayMessageSkeleton(messagesLoading)}\n            {searchTerm\n              ? this.displayMessages(searchResults)\n              : this.displayMessages(messages)}\n            {this.displayTypingUsers(typingUsers)}\n            <div ref={node => (this.messagesEnd = node)} />\n          </Comment.Group>\n        </Segment>\n\n        <MessageForm\n          messagesRef={messagesRef}\n          currentChannel={channel}\n          currentUser={user}\n          isPrivateChannel={privateChannel}\n          getMessagesRef={this.getMessagesRef}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setUserPosts }\n)(Messages);\n","import React from \"react\";\nimport {\n  Segment,\n  Accordion,\n  Header,\n  Icon,\n  Image,\n  List\n} from \"semantic-ui-react\";\n\nclass MetaPanel extends React.Component {\n  state = {\n    channel: this.props.currentChannel,\n    privateChannel: this.props.isPrivateChannel,\n    activeIndex: 0\n  };\n\n  setActiveIndex = (event, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n    this.setState({ activeIndex: newIndex });\n  };\n\n  formatCount = num => (num > 1 || num === 0 ? `${num} posts` : `${num} post`);\n\n  displayTopPosters = posts =>\n    Object.entries(posts)\n      .sort((a, b) => b[1] - a[1])\n      .map(([key, val], i) => (\n        <List.Item key={i}>\n          <Image avatar src={val.avatar} />\n          <List.Content>\n            <List.Header as=\"a\">{key}</List.Header>\n            <List.Description>{this.formatCount(val.count)}</List.Description>\n          </List.Content>\n        </List.Item>\n      ))\n      .slice(0, 5);\n\n  render() {\n    const { activeIndex, privateChannel, channel } = this.state;\n    const { userPosts } = this.props;\n\n    if (privateChannel) return null;\n\n    return (\n      <Segment loading={!channel}>\n        <Header as=\"h3\" attached=\"top\">\n          About # {channel && channel.name}\n        </Header>\n        <Accordion styled attached=\"true\">\n          <Accordion.Title\n            active={activeIndex === 0}\n            index={0}\n            onClick={this.setActiveIndex}\n          >\n            <Icon name=\"dropdown\" />\n            <Icon name=\"info\" />\n            Channel Details\n          </Accordion.Title>\n          <Accordion.Content active={activeIndex === 0}>\n            {channel && channel.details}\n          </Accordion.Content>\n\n          <Accordion.Title\n            active={activeIndex === 1}\n            index={1}\n            onClick={this.setActiveIndex}\n          >\n            <Icon name=\"dropdown\" />\n            <Icon name=\"user circle\" />\n            Top Posters\n          </Accordion.Title>\n          <Accordion.Content active={activeIndex === 1}>\n            <List>{userPosts && this.displayTopPosters(userPosts)}</List>\n          </Accordion.Content>\n\n          <Accordion.Title\n            active={activeIndex === 2}\n            index={2}\n            onClick={this.setActiveIndex}\n          >\n            <Icon name=\"dropdown\" />\n            <Icon name=\"pencil alternate\" />\n            Created By\n          </Accordion.Title>\n          <Accordion.Content active={activeIndex === 2}>\n            <Header as=\"h3\">\n              <Image circular src={channel && channel.createdBy.avatar} />\n              {channel && channel.createdBy.name}\n            </Header>\n          </Accordion.Content>\n        </Accordion>\n      </Segment>\n    );\n  }\n}\n\nexport default MetaPanel;\n\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\n\nimport ColorPanel from \"./ColorPanel/ColorPanel\";\nimport SidePanel from \"./SidePanel/SidePanel\";\nimport Messages from \"./Messages/Messages\";\nimport MetaPanel from \"./MetaPanel/MetaPanel\";\n\n// prettier-ignore\nconst App = ({ currentUser, currentChannel, isPrivateChannel, userPosts, primaryColor, secondaryColor }) => (\n  <Grid columns=\"equal\" className=\"app\" style={{ background: secondaryColor }}>\n    <ColorPanel\n      key={currentUser && currentUser.name}\n      currentUser={currentUser}\n    />\n    <SidePanel\n      key={currentUser && currentUser.uid}\n      currentUser={currentUser}\n      primaryColor={primaryColor}\n    />\n\n    <Grid.Column style={{ marginLeft: 320 }}>\n      <Messages\n        key={currentChannel && currentChannel.id}\n        currentChannel={currentChannel}\n        currentUser={currentUser}\n        isPrivateChannel={isPrivateChannel}\n      />\n    </Grid.Column>\n\n    <Grid.Column width={4}>\n      <MetaPanel\n        key={currentChannel && currentChannel.name}\n        userPosts={userPosts}\n        currentChannel={currentChannel}\n        isPrivateChannel={isPrivateChannel}\n      />\n    </Grid.Column>\n  </Grid>\n);\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  currentChannel: state.channel.currentChannel,\n  isPrivateChannel: state.channel.isPrivateChannel,\n  userPosts: state.channel.userPosts,\n  primaryColor: state.colors.primaryColor,\n  secondaryColor: state.colors.secondaryColor\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nclass Login extends React.Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    errors: [],\n    loading: false\n  };\n\n  displayErrors = errors =>\n    errors.map((error, i) => <p key={i}>{error.message}</p>);\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(this.state.email, this.state.password)\n        .then(signedInUser => {\n          console.log(signedInUser);\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            loading: false\n          });\n        });\n    }\n  };\n\n  isFormValid = ({ email, password }) => email && password;\n\n  handleInputError = (errors, inputName) => {\n    return errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n  };\n\n  render() {\n    const { email, password, errors, loading } = this.state;\n\n    return (\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"violet\" textAlign=\"center\">\n            <Icon name=\"code branch\" color=\"violet\" />\n            Login to DevChat\n          </Header>\n          <Form onSubmit={this.handleSubmit} size=\"large\">\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Address\"\n                onChange={this.handleChange}\n                value={email}\n                className={this.handleInputError(errors, \"email\")}\n                type=\"email\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                onChange={this.handleChange}\n                value={password}\n                className={this.handleInputError(errors, \"password\")}\n                type=\"password\"\n              />\n\n              <Button\n                disabled={loading}\n                className={loading ? \"loading\" : \"\"}\n                color=\"violet\"\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n          <Message>\n            Don't have an account? <Link to=\"/register\">Register</Link>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport md5 from \"md5\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nclass Register extends React.Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmation: \"\",\n    errors: [],\n    loading: false,\n    usersRef: firebase.database().ref(\"users\")\n  };\n\n  isFormValid = () => {\n    let errors = [];\n    let error;\n\n    if (this.isFormEmpty(this.state)) {\n      error = { message: \"Fill in all fields\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else if (!this.isPasswordValid(this.state)) {\n      error = { message: \"Password is invalid\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  isFormEmpty = ({ username, email, password, passwordConfirmation }) => {\n    return (\n      !username.length ||\n      !email.length ||\n      !password.length ||\n      !passwordConfirmation.length\n    );\n  };\n\n  isPasswordValid = ({ password, passwordConfirmation }) => {\n    if (password.length < 6 || passwordConfirmation.length < 6) {\n      return false;\n    } else if (password !== passwordConfirmation) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  displayErrors = errors =>\n    errors.map((error, i) => <p key={i}>{error.message}</p>);\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.isFormValid()) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(this.state.email, this.state.password)\n        .then(createdUser => {\n          console.log(createdUser);\n          createdUser.user\n            .updateProfile({\n              displayName: this.state.username,\n              photoURL: `http://gravatar.com/avatar/${md5(\n                createdUser.user.email\n              )}?d=identicon`\n            })\n            .then(() => {\n              this.saveUser(createdUser).then(() => {\n                console.log(\"user saved\");\n              });\n            })\n            .catch(err => {\n              console.error(err);\n              this.setState({\n                errors: this.state.errors.concat(err),\n                loading: false\n              });\n            });\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            loading: false\n          });\n        });\n    }\n  };\n\n  saveUser = createdUser => {\n    return this.state.usersRef.child(createdUser.user.uid).set({\n      name: createdUser.user.displayName,\n      avatar: createdUser.user.photoURL\n    });\n  };\n\n  handleInputError = (errors, inputName) => {\n    return errors.some(error => error.message.toLowerCase().includes(inputName))\n      ? \"error\"\n      : \"\";\n  };\n\n  render() {\n    const {\n      username,\n      email,\n      password,\n      passwordConfirmation,\n      errors,\n      loading\n    } = this.state;\n\n    return (\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"orange\" textAlign=\"center\">\n            <Icon name=\"puzzle piece\" color=\"orange\" />\n            Register for DevChat\n          </Header>\n          <Form onSubmit={this.handleSubmit} size=\"large\">\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"username\"\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                onChange={this.handleChange}\n                value={username}\n                type=\"text\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Address\"\n                onChange={this.handleChange}\n                value={email}\n                className={this.handleInputError(errors, \"email\")}\n                type=\"email\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                onChange={this.handleChange}\n                value={password}\n                className={this.handleInputError(errors, \"password\")}\n                type=\"password\"\n              />\n\n              <Form.Input\n                fluid\n                name=\"passwordConfirmation\"\n                icon=\"repeat\"\n                iconPosition=\"left\"\n                placeholder=\"Password Confirmation\"\n                onChange={this.handleChange}\n                value={passwordConfirmation}\n                className={this.handleInputError(errors, \"password\")}\n                type=\"password\"\n              />\n\n              <Button\n                disabled={loading}\n                className={loading ? \"loading\" : \"\"}\n                color=\"orange\"\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n          {errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(errors)}\n            </Message>\n          )}\n          <Message>\n            Already a user? <Link to=\"/login\">Login</Link>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport { Loader, Dimmer } from \"semantic-ui-react\";\n\nconst Spinner = () => (\n  <Dimmer active>\n    <Loader size=\"huge\" content={\"Preparing Chat...\"} />\n  </Dimmer>\n);\n\nexport default Spinner;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/types\";\n\nconst initialUserState = {\n  currentUser: null,\n  isLoading: true\n};\n\nconst user_reducer = (state = initialUserState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false\n      };\n    case actionTypes.CLEAR_USER:\n      return {\n        ...state,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialChannelState = {\n  currentChannel: null,\n  isPrivateChannel: false,\n  userPosts: null\n};\n\nconst channel_reducer = (state = initialChannelState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload.currentChannel\n      };\n    case actionTypes.SET_PRIVATE_CHANNEL:\n      return {\n        ...state,\n        isPrivateChannel: action.payload.isPrivateChannel\n      };\n    case actionTypes.SET_USER_POSTS:\n      return {\n        ...state,\n        userPosts: action.payload.userPosts\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialColorsState = {\n  primaryColor: \"#4c3c4c\",\n  secondaryColor: \"#eee\"\n};\n\nconst colors_reducer = (state = initialColorsState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_COLORS:\n      return {\n        primaryColor: action.payload.primaryColor,\n        secondaryColor: action.payload.secondaryColor\n      };\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer,\n  channel: channel_reducer,\n  colors: colors_reducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport Login from \"./components/Auth/Login\";\nimport Register from \"./components/Auth/Register\";\nimport Spinner from \"./Spinner\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport firebase from \"./firebase\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\n\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers\";\nimport { setUser, clearUser } from \"./actions\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nclass Root extends React.Component {\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        // console.log(user);\n        this.props.setUser(user);\n        this.props.history.push(\"/\");\n      } else {\n        this.props.history.push(\"/login\");\n        this.props.clearUser();\n      }\n    });\n  }\n\n  render() {\n    return this.props.isLoading ? (\n      <Spinner />\n    ) : (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n      </Switch>\n    );\n  }\n}\n\nconst mapStateFromProps = state => ({\n  isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(\n  connect(\n    mapStateFromProps,\n    { setUser, clearUser }\n  )(Root)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <RootWithAuth />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}